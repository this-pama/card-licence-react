{"version":3,"sources":["logo.svg","view/login.js","controller/login.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoginView","_this","this","spinner","react_default","a","createElement","Spinner","animation","Container","Row","Col","sm","md","style","justifyContent","alignItems","marginTop","border","color","backgroundColor","textAlign","padding","paddingTop","props","errMessage","Form","Group","controlId","Label","Control","type","placeholder","className","value","email","onChange","handleEmail","Text","password","handlePassword","Button","block","variant","onClick","logIn","disabled","disable","React","Component","LoginApp","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","loginFetch","response","res","wrap","_context","prev","next","console","log","setState","spin","fetch","method","headers","content-type","body","JSON","stringify","sent","json","text","isHome","isSignIn","stop","_x","_x2","apply","arguments","username","target","length","validateForm","state","test","login_LoginView","App","NewApp","_React$Component","ready","inherits","createClass","key","_this2","setTimeout","login_LoginApp","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.2ca59cc7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class LoginView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col sm=\"2\" md=\"3\" />\r\n          <Col\r\n            sm=\"8\"\r\n            md=\"6\"\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              marginTop: 50\r\n            }}\r\n          >\r\n            <div>\r\n              <div\r\n                style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n              >\r\n                <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                  Card Licencing\r\n                </h3>\r\n              </div>\r\n              <p style={{ paddingTop: 10, color: 'red' }}>\r\n                {this.props.errMessage}\r\n              </p>\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  className=\"testEmail\"\r\n                  value={this.props.email}\r\n                  onChange={this.props.handleEmail}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  We'll never share your email with anyone else.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={this.props.password}\r\n                  onChange={this.props.handlePassword}\r\n                />\r\n              </Form.Group>\r\n              <Button\r\n                block\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                onClick={() =>\r\n                  this.props.logIn(this.props.email, this.props.password)\r\n                }\r\n                disabled={this.props.disable}\r\n              >\r\n                {this.props.spinner ? spinner : null} Login\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Col sm=\"2\" md=\"3\" />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nLoginView.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handlePassword: PropTypes.func.isRequired,\r\n  logIn: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  disable: PropTypes.bool.isRequired\r\n};\r\n","import React from 'react';\r\nimport LoginView from '../view/login';\r\n\r\nexport default class LoginApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  logIn = async (email, password) => {\r\n    console.log('login start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url = 'https://cardgenerationserver.herokuapp.com/login';\r\n    var loginFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email,\r\n        password\r\n      })\r\n    });\r\n    var response = await loginFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.text === 'login successful') {\r\n      console.log('Log in successful');\r\n      this.setState({\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else if (res.text) {\r\n      console.log(res.text);\r\n      this.setState({\r\n        errMessage: res.text,\r\n        spin: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      // console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handlePassword = password => {\r\n    if (password.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          password: password.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      // console.log(password.target.value);\r\n    } else {\r\n      this.setState({\r\n        password: '',\r\n        errMessage: 'Password cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.password.length > 0 &&\r\n      testEmail.test(this.state.email)\r\n    ) {\r\n      this.setState({\r\n        disable: false,\r\n        errMessage: ''\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LoginView\r\n        email={this.state.email}\r\n        password={this.state.password}\r\n        handleEmail={this.handleEmail}\r\n        handlePassword={this.handlePassword}\r\n        logIn={this.logIn}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport LoginApp from './controller/login';\r\n\r\nexport class NewApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ready: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(\r\n      () =>\r\n        this.setState({\r\n          ready: true\r\n        }),\r\n      2000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.ready) {\r\n      return <App />;\r\n    } else {\r\n      return <LoginApp />;\r\n    }\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h3 style={{color: 'blue' }}>Welcome to Cardolin</h3>\r\n        <p>The Home Hub for Card Licencing.</p>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}