{"version":3,"sources":["logo.svg","view/login.js","view/licence.js","controller/login.js","view/register.js","view/cpLicence.js","view/subCpLicence.js","controller/cpLicence.js","view/retailerLicence.js","controller/subCp.js","controller/licence.js","controller/retailer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LoginView","_this","this","spinner","react_default","a","createElement","Spinner","animation","Container","Row","Col","sm","md","style","justifyContent","alignItems","marginTop","border","color","backgroundColor","textAlign","padding","paddingTop","props","errMessage","Form","Group","controlId","Label","Control","type","placeholder","className","value","email","onChange","handleEmail","Text","password","handlePassword","Button","block","variant","onClick","logIn","disabled","disable","React","Component","LicenceView","backgroundImage","logo","fullName","handleFullName","username","handleUsername","serial","handleSerial","licence","CpLicenceView","SubCpLicenceView","RetailerView","LicenceApp","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","asyncToGenerator","regenerator_default","mark","_callee","licenceFetch","response","res","wrap","_context","prev","next","console","log","setState","spin","fetch","method","headers","content-type","body","JSON","stringify","state","sent","json","isHome","isSignIn","stop","target","length","validateForm","name","test","licence_LicenceView","App","src","alt","href","rel","NewApp","_React$Component","ready","inherits","createClass","key","_this2","setTimeout","licence_LicenceApp","App_App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.c47e68b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class LoginView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col sm=\"2\" md=\"3\" />\r\n          <Col\r\n            sm=\"8\"\r\n            md=\"6\"\r\n            style={{\r\n              justifyContent: 'center',\r\n              alignItems: 'center',\r\n              marginTop: 50\r\n            }}\r\n          >\r\n            <div>\r\n              <div\r\n                style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n              >\r\n                <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                  Card Licencing\r\n                </h3>\r\n              </div>\r\n              <p style={{ paddingTop: 10, color: 'red' }}>\r\n                {this.props.errMessage}\r\n              </p>\r\n              <Form.Group controlId=\"formBasicEmail\">\r\n                <Form.Label>Email address</Form.Label>\r\n                <Form.Control\r\n                  type=\"email\"\r\n                  placeholder=\"Enter email\"\r\n                  className=\"testEmail\"\r\n                  value={this.props.email}\r\n                  onChange={this.props.handleEmail}\r\n                />\r\n                <Form.Text className=\"text-muted\">\r\n                  We'll never share your email with anyone else.\r\n                </Form.Text>\r\n              </Form.Group>\r\n\r\n              <Form.Group controlId=\"formBasicPassword\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Password\"\r\n                  value={this.props.password}\r\n                  onChange={this.props.handlePassword}\r\n                />\r\n              </Form.Group>\r\n              <Button\r\n                block\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                onClick={() =>\r\n                  this.props.logIn(this.props.email, this.props.password)\r\n                }\r\n                disabled={this.props.disable}\r\n              >\r\n                {this.props.spinner ? spinner : null} Login\r\n              </Button>\r\n            </div>\r\n          </Col>\r\n          <Col sm=\"2\" md=\"3\" />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nLoginView.propTypes = {\r\n  email: PropTypes.string.isRequired,\r\n  password: PropTypes.string.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handlePassword: PropTypes.func.isRequired,\r\n  logIn: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  disable: PropTypes.bool.isRequired\r\n};\r\n","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class LicenceView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <div style={{ backgroundImage: logo }}>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"2\" md=\"3\" />\r\n            <Col\r\n              sm=\"8\"\r\n              md=\"6\"\r\n              style={{\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                marginTop: 50\r\n              }}\r\n            >\r\n              <div>\r\n                <div\r\n                  style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n                >\r\n                  <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                    Register Card Licence\r\n                  </h3>\r\n                </div>\r\n                <p style={{ paddingTop: 10, color: 'red' }}>\r\n                  {this.props.errMessage}\r\n                </p>\r\n                <Form.Group>\r\n                  <Form.Label>Full Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                    value={this.props.fullName}\r\n                    onChange={this.props.handleFullName}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={this.props.username}\r\n                    onChange={this.props.handleUsername}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Serial Number</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Serial Number\"\r\n                    value={this.props.serial}\r\n                    onChange={this.props.handleSerial}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Email address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={this.props.email}\r\n                    onChange={this.props.handleEmail}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Button\r\n                  block\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={this.props.disable}\r\n                  onClick={this.props.licence}\r\n                >\r\n                  {this.props.spinner ? spinner : null} Register A Licence\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col sm=\"2\" md=\"3\" />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nLicenceView.propTypes = {\r\n  fullName: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  serial: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  disable: PropTypes.bool.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handleFullName: PropTypes.func.isRequired,\r\n  handleSerial: PropTypes.func.isRequired,\r\n  handleUsername: PropTypes.func.isRequired,\r\n  licence: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport LoginView from '../view/login';\r\n\r\nexport default class LoginApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  logIn = async (email, password) => {\r\n    console.log('login start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url = 'https://cardgenerationserver.herokuapp.com/login';\r\n    var loginFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email,\r\n        password\r\n      })\r\n    });\r\n    var response = await loginFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.text === 'login successful') {\r\n      console.log('Log in successful');\r\n      this.setState({\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else if (res.text) {\r\n      console.log(res.text);\r\n      this.setState({\r\n        errMessage: res.text,\r\n        spin: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      // console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handlePassword = password => {\r\n    if (password.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          password: password.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      // console.log(password.target.value);\r\n    } else {\r\n      this.setState({\r\n        password: '',\r\n        errMessage: 'Password cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.password.length > 0 &&\r\n      testEmail.test(this.state.email)\r\n    ) {\r\n      this.setState({\r\n        disable: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LoginView\r\n        email={this.state.email}\r\n        password={this.state.password}\r\n        handleEmail={this.handleEmail}\r\n        handlePassword={this.handlePassword}\r\n        logIn={this.logIn}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class RegisterView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <div style={{ backgroundImage: logo }}>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"2\" md=\"3\" />\r\n            <Col\r\n              sm=\"8\"\r\n              md=\"6\"\r\n              style={{\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                marginTop: 10\r\n              }}\r\n            >\r\n              <div>\r\n                <div\r\n                  style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n                >\r\n                  <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                    Card Licence Request\r\n                  </h3>\r\n                </div>\r\n                <p style={{ paddingTop: 10, color: 'red' }}>\r\n                  {this.props.errMessage}\r\n                </p>\r\n                <Form.Group>\r\n                  <Form.Label>Full Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                    value={this.props.fullName}\r\n                    onChange={this.props.handleFullName}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={this.props.username}\r\n                    onChange={this.props.handleUsername}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Device</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Device\"\r\n                    value={this.props.device}\r\n                    onChange={this.props.handleDevice}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Phone Number</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Phone Number\"\r\n                    value={this.props.phoneNumber}\r\n                    onChange={this.props.handlePhoneNumber}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Email address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={this.props.email}\r\n                    onChange={this.props.handleEmail}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Address\"\r\n                    value={this.props.address}\r\n                    onChange={this.props.handleAddress}\r\n                  />\r\n                </Form.Group>\r\n                <Button\r\n                  block\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  onClick={this.props.request}\r\n                  disabled={this.props.disable}\r\n                >\r\n                  {this.props.spinner ? spinner : null} Make Request\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col sm=\"2\" md=\"3\" />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nRegisterView.propTypes = {\r\n  fullName: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  device: PropTypes.string.isRequired,\r\n  phoneNumber: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  disable: PropTypes.bool.isRequired,\r\n  handleFullName: PropTypes.func.isRequired,\r\n  handleUsername: PropTypes.func.isRequired,\r\n  handleDevice: PropTypes.func.isRequired,\r\n  handlePhoneNumber: PropTypes.func.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handleAddress: PropTypes.func.isRequired,\r\n  request: PropTypes.func.isRequired\r\n};\r\n","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class CpLicenceView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <div style={{ backgroundImage: logo }}>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"2\" md=\"3\" />\r\n            <Col\r\n              sm=\"8\"\r\n              md=\"6\"\r\n              style={{\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                marginTop: 50\r\n              }}\r\n            >\r\n              <div>\r\n                <div\r\n                  style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n                >\r\n                  <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                    Register CP Card Licence\r\n                  </h3>\r\n                </div>\r\n                <p style={{ paddingTop: 10, color: 'red' }}>\r\n                  {this.props.errMessage}\r\n                </p>\r\n                <Form.Group>\r\n                  <Form.Label>Full Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                    value={this.props.fullName}\r\n                    onChange={this.props.handleFullName}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={this.props.username}\r\n                    onChange={this.props.handleUsername}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Serial Number</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Serial Number\"\r\n                    value={this.props.serial}\r\n                    onChange={this.props.handleSerial}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Email address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={this.props.email}\r\n                    onChange={this.props.handleEmail}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Button\r\n                  block\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={this.props.disable}\r\n                  onClick={this.props.licence}\r\n                >\r\n                  {this.props.spinner ? spinner : null} Register CP Licence\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col sm=\"2\" md=\"3\" />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nCpLicenceView.propTypes = {\r\n  fullName: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  serial: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  disable: PropTypes.bool.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handleFullName: PropTypes.func.isRequired,\r\n  handleSerial: PropTypes.func.isRequired,\r\n  handleUsername: PropTypes.func.isRequired,\r\n  licence: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class SubCpLicenceView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <div style={{ backgroundImage: logo }}>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"2\" md=\"3\" />\r\n            <Col\r\n              sm=\"8\"\r\n              md=\"6\"\r\n              style={{\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                marginTop: 50\r\n              }}\r\n            >\r\n              <div>\r\n                <div\r\n                  style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n                >\r\n                  <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                    Register Sub CP Card Licence\r\n                  </h3>\r\n                </div>\r\n                <p style={{ paddingTop: 10, color: 'red' }}>\r\n                  {this.props.errMessage}\r\n                </p>\r\n                <Form.Group>\r\n                  <Form.Label>Full Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                    value={this.props.fullName}\r\n                    onChange={this.props.handleFullName}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={this.props.username}\r\n                    onChange={this.props.handleUsername}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Serial Number</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Serial Number\"\r\n                    value={this.props.serial}\r\n                    onChange={this.props.handleSerial}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Email address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={this.props.email}\r\n                    onChange={this.props.handleEmail}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Button\r\n                  block\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={this.props.disable}\r\n                  onClick={this.props.licence}\r\n                >\r\n                  {this.props.spinner ? spinner : null} Register Sub CP Licence\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col sm=\"2\" md=\"3\" />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nSubCpLicenceView.propTypes = {\r\n  fullName: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  serial: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  disable: PropTypes.bool.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handleFullName: PropTypes.func.isRequired,\r\n  handleSerial: PropTypes.func.isRequired,\r\n  handleUsername: PropTypes.func.isRequired,\r\n  licence: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport CpLicenceView from '../view/cpLicence';\r\n\r\nexport default class LicenceApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      fullName: '',\r\n      username: '',\r\n      serial: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  licence = async () => {\r\n    console.log('licence start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url = 'https://cardgenerationserver.herokuapp.com/v1/cpLicence/add';\r\n    var licenceFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        fullName: this.state.fullName,\r\n        serial: this.state.serial,\r\n        username: this.state.username\r\n      })\r\n    });\r\n    var response = await licenceFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.serial) {\r\n      console.log('successfully registered');\r\n      this.setState({\r\n        email: '',\r\n        fullName: '',\r\n        username: '',\r\n        serial: '',\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleFullName = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          fullName: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        fullName: '',\r\n        errMessage: 'Name cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSerial = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          serial: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        serial: '',\r\n        errMessage: 'Serial cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleUsername = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          username: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        username: '',\r\n        errMessage: 'Username cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.fullName.length > 0 &&\r\n      testEmail.test(this.state.email) &&\r\n      this.state.username.length > 0\r\n    ) {\r\n      this.setState({\r\n        disable: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true,\r\n        errMessage: ''\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <CpLicenceView\r\n        email={this.state.email}\r\n        fullName={this.state.fullName}\r\n        username={this.state.username}\r\n        serial={this.state.serial}\r\n        handleEmail={this.handleEmail}\r\n        handleFullName={this.handleFullName}\r\n        handleUsername={this.handleUsername}\r\n        handleSerial={this.handleSerial}\r\n        licence={this.licence}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Container, Row, Col, Form, Button, Spinner } from 'react-bootstrap';\r\nimport logo from '../logo.svg';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class RetailerView extends React.Component {\r\n  render() {\r\n    const spinner = <Spinner animation=\"border\" />;\r\n\r\n    return (\r\n      <div style={{ backgroundImage: logo }}>\r\n        <Container>\r\n          <Row>\r\n            <Col sm=\"2\" md=\"3\" />\r\n            <Col\r\n              sm=\"8\"\r\n              md=\"6\"\r\n              style={{\r\n                justifyContent: 'center',\r\n                alignItems: 'center',\r\n                marginTop: 50\r\n              }}\r\n            >\r\n              <div>\r\n                <div\r\n                  style={{ border: 1, color: 'white', backgroundColor: 'blue' }}\r\n                >\r\n                  <h3 style={{ textAlign: 'center', padding: 15 }}>\r\n                    Retailer Card Licence\r\n                  </h3>\r\n                </div>\r\n                <p style={{ paddingTop: 10, color: 'red' }}>\r\n                  {this.props.errMessage}\r\n                </p>\r\n                <Form.Group>\r\n                  <Form.Label>Full Name</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Full Name\"\r\n                    value={this.props.fullName}\r\n                    onChange={this.props.handleFullName}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Username</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Username\"\r\n                    value={this.props.username}\r\n                    onChange={this.props.handleUsername}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group>\r\n                  <Form.Label>Serial Number</Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    placeholder=\"Serial Number\"\r\n                    value={this.props.serial}\r\n                    onChange={this.props.handleSerial}\r\n                  />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"formBasicEmail\">\r\n                  <Form.Label>Email address</Form.Label>\r\n                  <Form.Control\r\n                    type=\"email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={this.props.email}\r\n                    onChange={this.props.handleEmail}\r\n                  />\r\n                  <Form.Text className=\"text-muted\">\r\n                    We'll never share your email with anyone else.\r\n                  </Form.Text>\r\n                </Form.Group>\r\n                <Button\r\n                  block\r\n                  variant=\"primary\"\r\n                  type=\"submit\"\r\n                  disabled={this.props.disable}\r\n                  onClick={this.props.licence}\r\n                >\r\n                  {this.props.spinner ? spinner : null} Register Retailer\r\n                  Licence\r\n                </Button>\r\n              </div>\r\n            </Col>\r\n            <Col sm=\"2\" md=\"3\" />\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nRetailerView.propTypes = {\r\n  fullName: PropTypes.string.isRequired,\r\n  username: PropTypes.string.isRequired,\r\n  serial: PropTypes.string.isRequired,\r\n  email: PropTypes.string.isRequired,\r\n  disable: PropTypes.bool.isRequired,\r\n  spinner: PropTypes.bool.isRequired,\r\n  handleEmail: PropTypes.func.isRequired,\r\n  handleFullName: PropTypes.func.isRequired,\r\n  handleSerial: PropTypes.func.isRequired,\r\n  handleUsername: PropTypes.func.isRequired,\r\n  licence: PropTypes.func.isRequired,\r\n  errMessage: PropTypes.string.isRequired\r\n};\r\n","import React from 'react';\r\nimport SubCpView from '../view/subCpLicence';\r\n\r\nexport default class SubCpApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      fullName: '',\r\n      username: '',\r\n      serial: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  licence = async () => {\r\n    console.log('licence start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url = 'https://cardgenerationserver.herokuapp.com/v1/subCpLicence/add';\r\n    var licenceFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        fullName: this.state.fullName,\r\n        serial: this.state.serial,\r\n        username: this.state.username\r\n      })\r\n    });\r\n    var response = await licenceFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.serial) {\r\n      console.log('successfully registered');\r\n      this.setState({\r\n        email: '',\r\n        fullName: '',\r\n        username: '',\r\n        serial: '',\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleFullName = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          fullName: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        fullName: '',\r\n        errMessage: 'Name cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSerial = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          serial: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        serial: '',\r\n        errMessage: 'Serial cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleUsername = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          username: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        username: '',\r\n        errMessage: 'Username cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.fullName.length > 0 &&\r\n      testEmail.test(this.state.email) &&\r\n      this.state.username.length > 0\r\n    ) {\r\n      this.setState({\r\n        disable: false,\r\n        errMessage: ''\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <SubCpView\r\n        email={this.state.email}\r\n        fullName={this.state.fullName}\r\n        username={this.state.username}\r\n        serial={this.state.serial}\r\n        handleEmail={this.handleEmail}\r\n        handleFullName={this.handleFullName}\r\n        handleUsername={this.handleUsername}\r\n        handleSerial={this.handleSerial}\r\n        licence={this.licence}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport LicenceView from '../view/licence';\r\n\r\nexport default class LicenceApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      fullName: '',\r\n      username: '',\r\n      serial: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  licence = async () => {\r\n    console.log('licence start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url = 'https://cardgenerationserver.herokuapp.com/v1//licence/add';\r\n    var licenceFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        fullName: this.state.fullName,\r\n        serial: this.state.serial,\r\n        username: this.state.username\r\n      })\r\n    });\r\n    var response = await licenceFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.serial) {\r\n      console.log('successfully registered');\r\n      this.setState({\r\n        email: '',\r\n        fullName: '',\r\n        username: '',\r\n        serial: '',\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleFullName = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          fullName: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        fullName: '',\r\n        errMessage: 'Name cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSerial = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          serial: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        serial: '',\r\n        errMessage: 'Serial cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleUsername = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          username: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        username: '',\r\n        errMessage: 'Username cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.fullName.length > 0 &&\r\n      testEmail.test(this.state.email) &&\r\n      this.state.username.length > 0\r\n    ) {\r\n      this.setState({\r\n        disable: false,\r\n        errMessage: ''\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LicenceView\r\n        email={this.state.email}\r\n        fullName={this.state.fullName}\r\n        username={this.state.username}\r\n        serial={this.state.serial}\r\n        handleEmail={this.handleEmail}\r\n        handleFullName={this.handleFullName}\r\n        handleUsername={this.handleUsername}\r\n        handleSerial={this.handleSerial}\r\n        licence={this.licence}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport RetailerView from '../view/retailerLicence';\r\n\r\nexport default class RetailerApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      fullName: '',\r\n      username: '',\r\n      serial: '',\r\n      errMessage: '',\r\n      spin: false,\r\n      disable: true\r\n    };\r\n  }\r\n\r\n  licence = async () => {\r\n    console.log('licence start');\r\n\r\n    this.setState({ spin: true });\r\n    //  console.log(this.state.spin)\r\n    var url =\r\n      'https://cardgenerationserver.herokuapp.com/v1/retailerLicence/add';\r\n    var licenceFetch = await fetch(url, {\r\n      method: 'POST',\r\n      headers: { 'content-type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email: this.state.email,\r\n        fullName: this.state.fullName,\r\n        serial: this.state.serial,\r\n        username: this.state.username\r\n      })\r\n    });\r\n    var response = await licenceFetch;\r\n    var res = await response.json();\r\n    console.log(res);\r\n    if (res.serial) {\r\n      console.log('successfully registered');\r\n      this.setState({\r\n        email: '',\r\n        fullName: '',\r\n        username: '',\r\n        serial: '',\r\n        isHome: true,\r\n        errMessage: '',\r\n        isSignIn: false,\r\n        spin: false\r\n      });\r\n      //    return <App />\r\n    } else {\r\n      this.setState({\r\n        errMessage: 'Error Occurred.',\r\n        spin: false\r\n      });\r\n    }\r\n  };\r\n\r\n  handleEmail = username => {\r\n    if (username.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          email: username.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(username.target.value);\r\n    } else {\r\n      this.setState({\r\n        email: '',\r\n        errMessage: 'Email cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleFullName = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          fullName: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        fullName: '',\r\n        errMessage: 'Name cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleSerial = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          serial: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        serial: '',\r\n        errMessage: 'Serial cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  handleUsername = name => {\r\n    if (name.target.value.length > 0) {\r\n      this.setState(\r\n        {\r\n          username: name.target.value\r\n        },\r\n        this.validateForm\r\n      );\r\n      console.log(name.target.value);\r\n    } else {\r\n      this.setState({\r\n        username: '',\r\n        errMessage: 'Username cannot be empty'\r\n      });\r\n    }\r\n  };\r\n\r\n  validateForm = () => {\r\n    let testEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n    if (\r\n      this.state.email.length > 0 &&\r\n      this.state.fullName.length > 0 &&\r\n      testEmail.test(this.state.email) &&\r\n      this.state.username.length > 0\r\n    ) {\r\n      this.setState({\r\n        disable: false,\r\n        errMessage: ''\r\n      });\r\n    } else {\r\n      this.setState({\r\n        disable: true\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <RetailerView\r\n        email={this.state.email}\r\n        fullName={this.state.fullName}\r\n        username={this.state.username}\r\n        serial={this.state.serial}\r\n        handleEmail={this.handleEmail}\r\n        handleFullName={this.handleFullName}\r\n        handleUsername={this.handleUsername}\r\n        handleSerial={this.handleSerial}\r\n        licence={this.licence}\r\n        errMessage={this.state.errMessage}\r\n        spinner={this.state.spin}\r\n        disable={this.state.disable}\r\n      />\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Login from './controller/login';\r\nimport Register from './view/register';\r\nimport Licence from './view/licence';\r\nimport CpLicenceApp from './controller/cpLicence';\r\nimport SubCpLicence from './controller/subCp';\r\nimport RetailerLicence from './controller/retailer';\r\nimport LicenceApp from './controller/licence';\r\nimport LoginApp from './controller/login';\r\n\r\nexport class NewApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ready: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(\r\n      () =>\r\n        this.setState({\r\n          ready: true\r\n        }),\r\n      1000\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.ready) {\r\n      return <App />;\r\n    } else {\r\n      return <LicenceApp />;\r\n    }\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewApp;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}